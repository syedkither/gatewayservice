hystrix.command.fallbackcmd.execution.isolation.thread.timeoutInMilliseconds=2000
spring.application.name=api-gateway
server.port=8085
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka/
eureka.client.register-with-eureka=true      
#eureka.instance.preferIpAddress=true
management.endpoints.web.exposure.include=hystrix.stream

#indicates the interval of heartbeats that the client sends to the server. The default value is 30 seconds which means that the client will send one heartbeat every 30 seconds.
eureka.instance.lease-renewal-interval-in-seconds: 30

#In order to simulate a temporary network problem and stop one of our client instances. Because we set the should-unregister-on-shutdown flag as false, the client won't invoke the unregister call and the server assumes that this is an ungraceful shutdown
#The red bold text in eureka server indicates that the Eureka Server is now in self-preservation mode and stopped evicting instances.
# inspect the registered instances section in eureka server to see if the stopped instance is still available or not. As we can see, it is available but with the status as DOWN:
# The only way the server can get out of self-preservation mode is either by starting the stopped instance or by disabling self-preservation itself. If we repeat the same steps by setting the flag eureka.server.enable-self-preservation as false, then the Eureka server will evict the stopped instance from the registry after the configured lease expiration duration property.
#eureka.client.should-unregister-on-shutdown: false